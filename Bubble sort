How it works (Step by Step):

Start from the first element of the array.
Compare the current element with the next element.
If the current element is greater than the next element, swap them.
Move to the next pair and repeat steps 2â€“3 until the last element of the array.
After the first pass, the largest element moves to the end.
Repeat the process for the remaining elements (excluding the last sorted ones).

Continue until no swaps are needed.

Suppose we have an array:
[5, 3, 8, 4, 2]
Pass 1: [3, 5, 4, 2, 8] â†’ 8 moved to the end
Pass 2: [3, 4, 2, 5, 8] â†’ 5 in correct position
Pass 3: [3, 2, 4, 5, 8]
Pass 4: [2, 3, 4, 5, 8] â†’ Fully sorted


ðŸ”¹ Time Complexity:
Best case (already sorted): O(n)
Worst case (reverse order): O(nÂ²)
Average case: O(nÂ²)

public class BubbleSort {
    public static void main(String[] args) {
        int[] arr = {5, 3, 8, 4, 2};

        for (int i = 0; i < arr.length - 1; i++) {
            for (int j = 0; j < arr.length - i - 1; j++) {
                if (arr[j] > arr[j + 1]) {
                    // swap arr[j] and arr[j+1]
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }
        }

        // print sorted array
        for (int num : arr) {
            System.out.print(num + " ");
        }
    }
}
